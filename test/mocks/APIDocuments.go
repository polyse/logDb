// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	meilisearch "github.com/senyast4745/meilisearch-go"
	mock "github.com/stretchr/testify/mock"
)

// APIDocuments is an autogenerated mocks type for the APIDocuments type
type APIDocuments struct {
	mock.Mock
}

// AddOrReplace provides a mocks function with given fields: documentsPtr
func (_m *APIDocuments) AddOrReplace(documentsPtr interface{}) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(documentsPtr)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(interface{}) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(documentsPtr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(documentsPtr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrReplaceWithPrimaryKey provides a mocks function with given fields: documentsPtr, primaryKey
func (_m *APIDocuments) AddOrReplaceWithPrimaryKey(documentsPtr interface{}, primaryKey string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(documentsPtr, primaryKey)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(interface{}, string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(documentsPtr, primaryKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(documentsPtr, primaryKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrUpdate provides a mocks function with given fields: documentsPtr
func (_m *APIDocuments) AddOrUpdate(documentsPtr interface{}) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(documentsPtr)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(interface{}) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(documentsPtr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(documentsPtr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrUpdateWithPrimaryKey provides a mocks function with given fields: documentsPtr, primaryKey
func (_m *APIDocuments) AddOrUpdateWithPrimaryKey(documentsPtr interface{}, primaryKey string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(documentsPtr, primaryKey)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(interface{}, string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(documentsPtr, primaryKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(documentsPtr, primaryKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client provides a mocks function with given fields:
func (_m *APIDocuments) Client() meilisearch.ClientInterface {
	ret := _m.Called()

	var r0 meilisearch.ClientInterface
	if rf, ok := ret.Get(0).(func() meilisearch.ClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.ClientInterface)
		}
	}

	return r0
}

// Delete provides a mocks function with given fields: identifier
func (_m *APIDocuments) Delete(identifier string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(identifier)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllDocuments provides a mocks function with given fields:
func (_m *APIDocuments) DeleteAllDocuments() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deletes provides a mocks function with given fields: identifier
func (_m *APIDocuments) Deletes(identifier []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(identifier)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mocks function with given fields: identifier, documentPtr
func (_m *APIDocuments) Get(identifier string, documentPtr interface{}) error {
	ret := _m.Called(identifier, documentPtr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(identifier, documentPtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexID provides a mocks function with given fields:
func (_m *APIDocuments) IndexID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// List provides a mocks function with given fields: request, documentsPtr
func (_m *APIDocuments) List(request meilisearch.ListDocumentsRequest, documentsPtr interface{}) error {
	ret := _m.Called(request, documentsPtr)

	var r0 error
	if rf, ok := ret.Get(0).(func(meilisearch.ListDocumentsRequest, interface{}) error); ok {
		r0 = rf(request, documentsPtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
