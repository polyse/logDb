// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	meilisearch "github.com/meilisearch/meilisearch-go"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// DefaultWaitForPendingUpdate provides a mock function with given fields: indexUID, updateID
func (_m *ClientInterface) DefaultWaitForPendingUpdate(indexUID string, updateID *meilisearch.AsyncUpdateID) (meilisearch.UpdateStatus, error) {
	ret := _m.Called(indexUID, updateID)

	var r0 meilisearch.UpdateStatus
	if rf, ok := ret.Get(0).(func(string, *meilisearch.AsyncUpdateID) meilisearch.UpdateStatus); ok {
		r0 = rf(indexUID, updateID)
	} else {
		r0 = ret.Get(0).(meilisearch.UpdateStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *meilisearch.AsyncUpdateID) error); ok {
		r1 = rf(indexUID, updateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Documents provides a mock function with given fields: indexID
func (_m *ClientInterface) Documents(indexID string) meilisearch.APIDocuments {
	ret := _m.Called(indexID)

	var r0 meilisearch.APIDocuments
	if rf, ok := ret.Get(0).(func(string) meilisearch.APIDocuments); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIDocuments)
		}
	}

	return r0
}

// Health provides a mock function with given fields:
func (_m *ClientInterface) Health() meilisearch.APIHealth {
	ret := _m.Called()

	var r0 meilisearch.APIHealth
	if rf, ok := ret.Get(0).(func() meilisearch.APIHealth); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIHealth)
		}
	}

	return r0
}

// Indexes provides a mock function with given fields:
func (_m *ClientInterface) Indexes() meilisearch.APIIndexes {
	ret := _m.Called()

	var r0 meilisearch.APIIndexes
	if rf, ok := ret.Get(0).(func() meilisearch.APIIndexes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIIndexes)
		}
	}

	return r0
}

// Keys provides a mock function with given fields:
func (_m *ClientInterface) Keys() meilisearch.APIKeys {
	ret := _m.Called()

	var r0 meilisearch.APIKeys
	if rf, ok := ret.Get(0).(func() meilisearch.APIKeys); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIKeys)
		}
	}

	return r0
}

// Search provides a mock function with given fields: indexID
func (_m *ClientInterface) Search(indexID string) meilisearch.APISearch {
	ret := _m.Called(indexID)

	var r0 meilisearch.APISearch
	if rf, ok := ret.Get(0).(func(string) meilisearch.APISearch); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APISearch)
		}
	}

	return r0
}

// Settings provides a mock function with given fields: indexID
func (_m *ClientInterface) Settings(indexID string) meilisearch.APISettings {
	ret := _m.Called(indexID)

	var r0 meilisearch.APISettings
	if rf, ok := ret.Get(0).(func(string) meilisearch.APISettings); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APISettings)
		}
	}

	return r0
}

// Stats provides a mock function with given fields:
func (_m *ClientInterface) Stats() meilisearch.APIStats {
	ret := _m.Called()

	var r0 meilisearch.APIStats
	if rf, ok := ret.Get(0).(func() meilisearch.APIStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIStats)
		}
	}

	return r0
}

// Updates provides a mock function with given fields: indexID
func (_m *ClientInterface) Updates(indexID string) meilisearch.APIUpdates {
	ret := _m.Called(indexID)

	var r0 meilisearch.APIUpdates
	if rf, ok := ret.Get(0).(func(string) meilisearch.APIUpdates); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIUpdates)
		}
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *ClientInterface) Version() meilisearch.APIVersion {
	ret := _m.Called()

	var r0 meilisearch.APIVersion
	if rf, ok := ret.Get(0).(func() meilisearch.APIVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meilisearch.APIVersion)
		}
	}

	return r0
}

// WaitForPendingUpdate provides a mock function with given fields: ctx, interval, indexID, updateID
func (_m *ClientInterface) WaitForPendingUpdate(ctx context.Context, interval time.Duration, indexID string, updateID *meilisearch.AsyncUpdateID) (meilisearch.UpdateStatus, error) {
	ret := _m.Called(ctx, interval, indexID, updateID)

	var r0 meilisearch.UpdateStatus
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, *meilisearch.AsyncUpdateID) meilisearch.UpdateStatus); ok {
		r0 = rf(ctx, interval, indexID, updateID)
	} else {
		r0 = ret.Get(0).(meilisearch.UpdateStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, string, *meilisearch.AsyncUpdateID) error); ok {
		r1 = rf(ctx, interval, indexID, updateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
