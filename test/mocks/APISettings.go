// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	meilisearch "github.com/senyast4745/meilisearch-go"
	mock "github.com/stretchr/testify/mock"
)

// APISettings is an autogenerated mocks type for the APISettings type
type APISettings struct {
	mock.Mock
}

// GetAll provides a mocks function with given fields:
func (_m *APISettings) GetAll() (*meilisearch.Settings, error) {
	ret := _m.Called()

	var r0 *meilisearch.Settings
	if rf, ok := ret.Get(0).(func() *meilisearch.Settings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.Settings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributesForFaceting provides a mocks function with given fields:
func (_m *APISettings) GetAttributesForFaceting() (*[]string, error) {
	ret := _m.Called()

	var r0 *[]string
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisplayedAttributes provides a mocks function with given fields:
func (_m *APISettings) GetDisplayedAttributes() (*[]string, error) {
	ret := _m.Called()

	var r0 *[]string
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistinctAttribute provides a mocks function with given fields:
func (_m *APISettings) GetDistinctAttribute() (*meilisearch.Str, error) {
	ret := _m.Called()

	var r0 *meilisearch.Str
	if rf, ok := ret.Get(0).(func() *meilisearch.Str); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.Str)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRankingRules provides a mocks function with given fields:
func (_m *APISettings) GetRankingRules() (*[]string, error) {
	ret := _m.Called()

	var r0 *[]string
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearchableAttributes provides a mocks function with given fields:
func (_m *APISettings) GetSearchableAttributes() (*[]string, error) {
	ret := _m.Called()

	var r0 *[]string
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStopWords provides a mocks function with given fields:
func (_m *APISettings) GetStopWords() (*[]string, error) {
	ret := _m.Called()

	var r0 *[]string
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSynonyms provides a mocks function with given fields:
func (_m *APISettings) GetSynonyms() (*map[string][]string, error) {
	ret := _m.Called()

	var r0 *map[string][]string
	if rf, ok := ret.Get(0).(func() *map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAll provides a mocks function with given fields:
func (_m *APISettings) ResetAll() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAttributesForFaceting provides a mocks function with given fields:
func (_m *APISettings) ResetAttributesForFaceting() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDisplayedAttributes provides a mocks function with given fields:
func (_m *APISettings) ResetDisplayedAttributes() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDistinctAttribute provides a mocks function with given fields:
func (_m *APISettings) ResetDistinctAttribute() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetRankingRules provides a mocks function with given fields:
func (_m *APISettings) ResetRankingRules() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSearchableAttributes provides a mocks function with given fields:
func (_m *APISettings) ResetSearchableAttributes() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetStopWords provides a mocks function with given fields:
func (_m *APISettings) ResetStopWords() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSynonyms provides a mocks function with given fields:
func (_m *APISettings) ResetSynonyms() (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called()

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func() *meilisearch.AsyncUpdateID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAll provides a mocks function with given fields: request
func (_m *APISettings) UpdateAll(request meilisearch.Settings) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(request)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(meilisearch.Settings) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(meilisearch.Settings) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttributesForFaceting provides a mocks function with given fields: _a0
func (_m *APISettings) UpdateAttributesForFaceting(_a0 []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(_a0)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDisplayedAttributes provides a mocks function with given fields: _a0
func (_m *APISettings) UpdateDisplayedAttributes(_a0 []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(_a0)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistinctAttribute provides a mocks function with given fields: _a0
func (_m *APISettings) UpdateDistinctAttribute(_a0 meilisearch.Str) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(_a0)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(meilisearch.Str) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(meilisearch.Str) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRankingRules provides a mocks function with given fields: arr
func (_m *APISettings) UpdateRankingRules(arr []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(arr)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(arr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(arr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSearchableAttributes provides a mocks function with given fields: _a0
func (_m *APISettings) UpdateSearchableAttributes(_a0 []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(_a0)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStopWords provides a mocks function with given fields: _a0
func (_m *APISettings) UpdateStopWords(_a0 []string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(_a0)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func([]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSynonyms provides a mocks function with given fields: synonyms
func (_m *APISettings) UpdateSynonyms(synonyms map[string][]string) (*meilisearch.AsyncUpdateID, error) {
	ret := _m.Called(synonyms)

	var r0 *meilisearch.AsyncUpdateID
	if rf, ok := ret.Get(0).(func(map[string][]string) *meilisearch.AsyncUpdateID); ok {
		r0 = rf(synonyms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meilisearch.AsyncUpdateID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string][]string) error); ok {
		r1 = rf(synonyms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
